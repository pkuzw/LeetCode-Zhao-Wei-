///@brief	Valid Parentheses
/*			
			Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

			The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.
*/
///@author	zhaowei
///@date	2015.06.05
///@version 1.0
///@note	通过观察和思考发现，有效括号对具有最内层的括号对一定是紧邻着的。
//			先找到第一个挨在一起的括号对，将它舍去，然后接着找紧挨着的一对括号，直到能够将字符串删空为止，此时字符串为有效括号对；否则为无效的括号对。

///@date    2015.09.07
///@version 2.0

///@date	2015.09.21
///@version	2.1
#include <iostream>
#include <string>
#include <stack>
using namespace std;

class Solution_v1
{
public:
	///@brief	判断字符串是否为有效括号对组成
	///@param	s	待判断的字符串
	///@return	如果字符串有效，返回true；否则返回false
	///@author	zhaowei
	///@date	2015.06.05
	bool isValid(string s) {

		int len = s.length();
		int cnt = len/2;
		while (cnt--)	//至少应该有cnt这么多对括号是不紧挨着的
		{
			for (int i = 0; i < s.length()-1; i++)
			{
				if (s.empty())	// 如果字符串已经为空，则返回true
				{
					return true;
				}

				// 找到最内层括号对，对其进行删除操作
				if ((s[i] == '(' && s[i+1] == ')') 
					||(s[i] == '[' && s[i+1] == ']') 
					||(s[i] == '{' && s[i+1] == '}') 
					)
				{
					s.erase(i, 2);	// 利用string::erase(pos, num)来对从第i位开始的连续两个字符进行删除操作
				}
			}
		}		
		return false;	// 如果s没有在while循环内部清空，则返回false

	}
};

class Solution_v2 {
public:
	///@brief	判断一个括号字符串是否合法。
	///@param	s	括号字符串
	///@return	如果字符串是合法的括号字符串，则返回true；否则返回false
	///@note	利用栈来存放括号字符串，如果是左括号，则压栈；如果是右括号，看栈顶元素是否和该右括号匹配，如果不匹配则返回false；否则弹出栈顶元素，继续向后匹配。直到字符串结束。
	//			时间复杂度为O(n)，空间复杂度为O(n)。
    bool isValid(string s) {
		stack<char> stk;
		if (s.empty())	return true;
		for (int i = 0; i != s.size(); i++) {
			if (s[i] == '(' || s[i] == '{' || s[i] == '[')	stk.push(s[i]);
			else {
				if (stk.empty())	return false;
				if ((s[i] == ')' && stk.top() != '(') ||
					(s[i] == ']' && stk.top() != '[') ||
					(s[i] == '}' && stk.top() != '{'))
					return false;
				stk.pop();
			}
		}
		return stk.empty();
    }
};

class Solution_wa {
public:
	///@note	1. 用三个变量来记录"()", "[]"和"{}"是否按照顺序成对出现；
	//			2. 出现左括号时变量加1，出现右括号时变量减1；
	//			3. 变量不能小于零，结束循环时变量不能不为零；	
	//			4. 时间复杂度为O(n)，空间复杂度为O(1).
	//			5. 会挂在"([)]"上。
	bool isValid(string s) {
		int bcnt[3] = {0};
		string brackets = "()[]{}";
		for (int i = 0; i != s.size(); i++) {
			for (int j = 0; j != 6; j++) {
				if (j % 2 == 0 && s[i] == brackets[j])	bcnt[j/2]++;				
				if (j % 2 == 1 && s[i] == brackets[j]) {
					if (bcnt[j/2] <= 0)	return false;
					bcnt[j/2]--;
					if (!bcnt[j/2]) {
						for (int k = 0; k != 3; k++) {
							if (k == j / 2)	continue;
							if (bcnt[k])	return false;
						}
					}
				}
			}			
		}
		return (!bcnt[0]) && (!bcnt[1]) && (!bcnt[2]);
	}
};

int main()
{
	string s = "([)]";
	Solution slt;
	bool rslt = slt.isValid(s);
	Solution_v1 s1;
	bool r1 = s1.isValid(s);
	Solution_v2 s2;
	bool r2 = s2.isValid(s);
	return 0;
}